///$tab **Configuration **
TRACE Configuration;

/////////////////////////////////////////// REQUIRED ///////////////////////////////////////////
// IMPORTANT: To run this application, the user must be a "Tenant Admin" and must have an 
// API Key, which requires the "Developer Role" and APIs to be enabled within the tenant.

/*
1. The name of the REST connection that will be used. You must first create a valid REST connection to any endpoint to Qlik Sense tenant.
		Example: '<Space>:<Connection Name>'
				Note: ':<Connection Name>' is the relative path which will check for a connection in the current space.
		Example Connection: 
				URL: 			https://<tenant-name>.<region>.qlikcloud.com/api/v1/items
				Header: 		"Authorization"
				Header Value: 	"Bearer <token>"
		For reference on how to connect: 
				https://qlik.dev/tutorials/generate-your-first-api-key
*/
SET vu_rest_connection = ':monitoring_apps_REST';

   
/*
2. The location where you want to store your QVDs.
		Example: '<Space>:<DataFiles>'
				Note: ':<Connection Name>' is the relative path which will check for a connection in the current space.
*/
SET vu_qvd_storage_connection = ':DataFiles';

////////////////////////////////////////////////////////////////////////////////////////////////
///$tab * Optional Configuration *
TRACE Optional Configuration;

////////////////////////////////////////////////////////////////////////////////////////
// Optional Configuration (No need to change these unless you desire)

/*
1. The timezone difference from GMT. Modifies the report times to desired GMT offset
		Example 1: -5
		Example 2: 5
		
		Caution: The 'reports' billing metric in the management console is reported in GMT. If you change this variable, the reports metric
		displayed in this app will likely not match the metric displayed in the console as the timestamp adjustment could shift reports 
		that finish within hours of month end out of the billed month.
*/
SET vu_GMT_offset = 0;

/* 
2. Maximum days back to store report data in QVDs
		Example: 365
*/
SET vu_report_rolling_range = 365;

/*
3. The user field to best represent the user: 'Id', 'Name', 'Subject', 'Email'
*/
SET vu_personal_space_user_field = 'Name';

/*
4. The number of days back to fetch data initially, before incrementally building
*/
SET vu_initial_days_back = 90;

/*
5. The number of days back to calculate report concurrency by the second
*/
//not in use for now
SET vu_report_concurrency_days_back = 14;

/*
6. The page size to iterate over the reports API. Must be between 1-100 (Default 100)
   This can be useful if receiving the error: "Message too large: (Connector error: Received message larger than max (x vs. y)"
   There is a 4 MB limit for the REST connector response size, so this variable controls how many reports are brought back in one REST response
   Note that if a single report yields too large of a result (over 4MB), this will not help. That reports may have to be skipped with SET ErrorMode = 0;
*/
SET vu_reports_page_size = 100;

/*
7. The page size to iterate over the audits API. Must be between 1-100 (Default 100)
   This can help to relieve the weight on the audits API calls
*/
SET vu_audit_page_size = 100;


////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////
// Multi-Tenant App Configuration

// This application has support for multi-tenancy. If this app is designated as a "parent" app, it loads in the generated
// QVDs of all "child" apps from a centralized location (e.g., AWS S3, Azure Blob, or Google Cloud Storage where the 
// "QlikMetaCollection" directory resides) and does not directly harvest any data itself, meaning it depends on the existence 
// of "child" apps. If designated as a child app, it writes out all of its final QVDs post harvest to a centralized location.

SET vu_multi_tenant_enabled 			= 0;					// To enable Multi-Tenant app support, regardless of "Parent" or "Child" (1 or 0)

SET vu_is_parent_app 					= 0;					// If this application is to be the parent app across varying tenants (1 or 0)

// The connection to the parent directory of the QlikMetaCollection directory, which houses all of the multi-tenant metadata.
// This is the root location to read/write all QVDs to so that they can be loaded across tenants (S3, Azure Blob, or Google 
// Cloud Storage). The final path will resemble "QlikMetaCollection/Tenants/<TenantID>/Monitoring/<Monitoring App Name>/<Table>.qvd". 
// The location below should point to the parent directory of the "QlikMetaCollection" folder. If the "QlikMetaCollection" 
// folder does not exist, it will be automatically created.

// **Azure Blob, AWS S3, and Google CLoud Storage have been tested and confirmed to work without any modifications**
SET vu_qlik_meta_collection_parent_dir = 'lib://:';			// Parent directory of the "QlikMetaCollection" folder (trailing slash optional)

////////////////////////////////////////////////////////////////////////////////////////
///$tab Variables
SUB variables

	LET vu_tenant_fqdn 				 = GetSysAttr('tenantUrl');

	LET vStartTime 					 = Now(1);
 
	LET vAPICallCounter 			 = 0;
	  
	LET vu_GMT_offset 				 = Replace(vu_GMT_offset,'+','');

	LET vReportDiffFromGMTString 	 = If(vu_GMT_offset=0,'GMT-00:00',
		If(vu_GMT_offset<0,'GMT-' & Right('0' & Replace(vu_GMT_offset,'-',''),2) & ':00',
		If(vu_GMT_offset>0,'GMT+' & Right('0' & vu_GMT_offset,2) & ':00')));
		
	LET vReportTimeDiffFromGMT       = ConvertToLocalTime('$(vStartTime)','$(vReportDiffFromGMTString)') - GMT();
	
	LET vMaxReportAge        		 = TimeStamp(Date(Today(1)) - $(vu_report_rolling_range));
	
	LET v90BackGMT				 	 = Date(Today(1) - 90); // Given that the `reports` endpoint goes back 180 but the `audits` only goes back 90, truncating both to 90

	LET vInitialDaysBack			 = If($(vu_initial_days_back)>0 AND $(vu_initial_days_back)<=90,Date(Today(1) - $(vu_initial_days_back)),$(v90BackGMT)); // If there is an initial days back setting that is between 0 and 90, set it, otherwise set it to 90

	LET vConcurrencyMinutes 		 = 1; // The width of the concurrency buckets for analyzing session and task concurrency. Default 1.

	LET vAppQVDName					 = Lower(Replace('$(app_name)',' ','_'));

	SET vOutputQVDName				 = 'lib://$(vu_qvd_storage_connection)/$(vAppQVDName)_$1_$2.qvd';

	SET vIncremental 				 = 1;  // Incremental load flag -- default = 1 (active). This can be disabled by setting to 0 (why do that?)
	
	LET vReportsQVD			 		 = '$(vOutputQVDName(AuditReports,$(app_version)))';

	LET vIncrementalQVDsAvailable    = If(Len(FileTime('$(vReportsQVD)'))>0,1,0);  // Check to see that incremental QVDs are available
	
	LET vIncrementalMessage 		 = If($(vIncrementalQVDsAvailable)=1,'Incremental QVDs found','No Incremental QVDs found. Do not panic. I can fix that.');
	
	SET vu_personal_space_user_list  = 'id','name','subject','email';
    
    SET vTenantHasMeteredReports 	 = 1; // Instantiate that the tenant has metered reports
	
	IF $(vu_is_parent_app)=0 THEN
	
		IF $(vIncrementalQVDsAvailable)=1 THEN

			ReportMaxEndTime:
			LOAD
				Max(ReportEndTime) AS ReportMaxEndTime
			FROM '$(vReportsQVD)'(qvd);

			LET vIncrementalStartTime = Peek('ReportMaxEndTime',0,'ReportMaxEndTime') - (1 / 24 );

			DROP TABLE ReportMaxEndTime;

			LET vIncrementalStartTimeDisplay = TimeStamp('$(vIncrementalStartTime)','MM/DD/YYYY hh:mm:ss.fff');

			TRACE Incremental will resume from: $(vIncrementalStartTimeDisplay);

			SET vIncrementalStartTimeDisplay =;

		ELSE

			TRACE $(vIncrementalMessage);

			LET vIncrementalStartTime = '$(v90BackGMT)';

		END IF
	
	END IF

END SUB
///$tab << About >>
/* 

    ________                          _____     _______              ______                          
    ___  __ \___________________________  /_    ___    |____________ ___  /____  ____________________
    __  /_/ /  _ \__  __ \  __ \_  ___/  __/    __  /| |_  __ \  __ `/_  /__  / / /__  /_  _ \_  ___/
    _  _, _//  __/_  /_/ / /_/ /  /   / /_      _  ___ |  / / / /_/ /_  / _  /_/ /__  /_/  __/  /    
    /_/ |_| \___/_  .___/\____//_/    \__/      /_/  |_/_/ /_/\__,_/ /_/  _\__, / _____/\___//_/     
                 /_/                                                      /____/                     


    Copyright 2024 QlikTech International
    Created by the Analytics Presales Architecture Team, Qlik

	About the "Report Analyzer" app:
    
    The Report Analyzer is an application designed for Qlik Cloud to track and analyze 
    metered report executions within the tenant(s). Some of the benefits of this application are as follows:

      - Current Month Reports Metric
      - History of Reports Metric
      - Breakdown of Reports Metric by App, Event, Executor (and time periods)
      - Failed Reports
      - Report Execution Duration

    *This application pulls 90 days of report audits, and will then continue to build from there incrementally using QVDs.

*/
///$tab Check Version
SUB check_version

	// check to see whether the app is the latest version

	LIB CONNECT TO '$(vu_rest_connection)';

	RestConnectorMasterTable:
	SQL SELECT 
		"id",
		"name",
		"version",
		"source",
		"qcmaInstaller",
		"oemInstaller"
	FROM JSON (wrap on) "root"
	WITH CONNECTION (  
		URL "https://raw.githubusercontent.com/qlik-oss/qlik-cloud-monitoring-apps/main/manifests/resources.json",
		HTTPHEADER "Authorization" ""
	);

	[Version]:
	LOAD	
		[version]
	RESIDENT RestConnectorMasterTable
	WHERE name='$(app_name)';

	DROP TABLE RestConnectorMasterTable;

	LET vLatestVersion = Peek('version',0,'Version');
	LET vIsLatestVersion = If('$(vLatestVersion)'='v$(app_version)',1,0);

	DROP TABLE Version;

END SUB
///$tab Tenant Metadata
SUB get_tenant_metadata

	LIB CONNECT TO '$(vu_rest_connection)';

	RestConnectorMasterTable:
	SQL SELECT 
		"__KEY_root",
		(SELECT 
			"id",
			"name",
			"datacenter",
			"created",
			"status",
			"__FK_data",
			"__KEY_data",
			(SELECT 
				"@Value",
				"__FK_hostnames"
			FROM "hostnames" FK "__FK_hostnames" ArrayValueAlias "@Value")
		FROM "data" PK "__KEY_data" FK "__FK_data")
	FROM JSON (wrap on) "root" PK "__KEY_root"
	WITH CONNECTION (  
	URL "https://$(vu_tenant_fqdn)/api/v1/tenants"
	);

    [Hostname]:
    LOAD	
        [@Value] AS Hostname
    RESIDENT RestConnectorMasterTable
    WHERE NOT IsNull([__FK_hostnames]);


	[TenantMetadata]:
	LOAD	
		[id] AS TenantID,
		[name] AS TenantName,
		[datacenter] AS TenantDataCenter,
		Date([created]) AS TenantCreatedDate,
		[status] AS TenantStatus,
		Peek('Hostname',0,'Hostname') AS Hostname,
		TimeStamp('$(vStartTime)') AS LastReportStartTime
	RESIDENT RestConnectorMasterTable
	WHERE NOT IsNull([__FK_data]);

	DROP TABLE Hostname;
	DROP TABLE RestConnectorMasterTable;

	LET vTenantID = Peek('TenantID',0,'TenantMetadata');
  
	Map_TenantID_TenantName:
	MAPPING LOAD DISTINCT
		TenantID,
		TenantName
	RESIDENT TenantMetadata;

END SUB
///$tab Get User Field
SUB get_user_field

	Lookup_UserVariable_FieldName:
	LOAD * INLINE [
		UserVariable	,FieldName
		id				,UserID
		subject			,UserSubject
		email 			,UserEmail
		name			,UserName
	];

	IF Match(Lower('$(vu_personal_space_user_field)'),$(vu_personal_space_user_list)) THEN

		TRACE Using '$(vu_personal_space_user_field)' to construct 'Personal' space names;

		LET vPersonalUserField = Lookup('FieldName','UserVariable',Lower('$(vu_personal_space_user_field)'),'Lookup_UserVariable_FieldName');

	ELSE

		TRACE The value for the variable 'vu_personal_space_user_field' must contain one of: $(vu_personal_space_user_list);
		TRACE The value found was: '$(vu_personal_space_user_field)';
		TRACE Defaulting to 'Subject';

		SET vPersonalUserField = 'UserSubject';

	END IF
	
	DROP TABLE Lookup_UserVariable_FieldName;

END SUB
///$tab Check License / Reports
SUB check_license_reports

	// check to see whether the app is the latest version

	LIB CONNECT TO '$(vu_rest_connection)';
	
	RestConnectorMasterTable:
	SQL SELECT 
		"__KEY_root",
		(SELECT 
			"__FK_parameters",
			"__KEY_parameters",
			(SELECT 
				  "quantity",
				  "scope",
				  "title",
				  "value",
				  "action",
				  "periodType",
				  "resourceType",
				  "visible",
				  "toggle",
				  "count",
				  "unit",
				  "unlimited",
				  "geoanalytics",
				  "jwt_auth_enabled",
				  "saas_alerting",
				  "enabled",
				  "__FK_values"
			FROM "values" FK "__FK_values")
		FROM "parameters" PK "__KEY_parameters" FK "__FK_parameters")
	FROM JSON (wrap on) "root" PK "__KEY_root"
		WITH CONNECTION (  
		URL "https://$(vu_tenant_fqdn)/api/v1/licenses/overview"
	);

	[values]:
	LOAD	
		[quantity],
		[scope],
		[title],
		[value],
		[action],
		[periodType],
		[resourceType],
		[visible],
		[toggle],
		[count],
		[unit],
		[unlimited],
		[geoanalytics],
		[jwt_auth_enabled],
		[saas_alerting],
		[enabled],
		[__FK_values] AS [__KEY_parameters]
	RESIDENT RestConnectorMasterTable
	WHERE NOT IsNull([__FK_values]) and title='Reporting Service';

	LET vMonthlyLicensedMeteredReports=peek('quantity',0,'values');

	DROP TABLES RestConnectorMasterTable,values;        
 
 	//Add a table for OEM Dashboard support (future)
 	
	TenantReportQuota:
	LOAD
		'$(vMonthlyLicensedMeteredReports)' AS TenantReportsQuota,
		'$(vTenantID)' AS TenantID
	AUTOGENERATE (1);
	 
END SUB
///$tab Users
SUB get_users

	SET vParams = 'limit=100';
	LET vCounter = 0;

	DO
  
	// LET vAPICallCounter = $(vAPICallCounter) + 1;
  
	LIB CONNECT TO '$(vu_rest_connection)';

	RestConnectorMasterTable:
	SQL SELECT 
		"__KEY_root",
		(SELECT 
			"__KEY_links",
			"__FK_links",
			(SELECT 
				"href",
				"__FK_self"
			FROM "self" FK "__FK_self"),
			(SELECT 
				"href" AS "href_u0",
				"__FK_next"
			FROM "next" FK "__FK_next")
		FROM "links" PK "__KEY_links" FK "__FK_links"),
		(SELECT 
			"id",
			"tenantId",
			"created",
			"lastUpdated",
			"status",
			"name",
			"subject",
			"email",
			"__KEY_data",
			"__FK_data",
			(SELECT 
				"@Value",
				"__FK_roles"
			FROM "roles" FK "__FK_roles" ArrayValueAlias "@Value"),
			(SELECT 
				"__KEY_links_u0",
				"__FK_links_u0",
				(SELECT 
					"href" AS "href_u1",
					"__FK_self_u0"
				FROM "self" FK "__FK_self_u0")
			FROM "links" PK "__KEY_links_u0" FK "__FK_links_u0")
		FROM "data" PK "__KEY_data" FK "__FK_data")
	FROM JSON (wrap on) "root" PK "__KEY_root"
	WITH CONNECTION (  
	  URL "https://$(vu_tenant_fqdn)/api/v1/users?$(vParams)"
	);

	Users:
	LOAD
		[id] AS UserID,
		// [id] AS UserID,
		// [tenantId],
		// Date([created]) AS ReportUserCreatedDate,
		// Date([lastUpdated]) AS ReportUserLastUpdatedDate,
		[status] AS UserStatus,
		[name] AS UserName,
		[subject] AS UserSubject,
		[email] AS UserEmail,
		[__KEY_data] & '|' & $(vCounter) & '|' & '$(vTenantID)' AS [_UserKey]
	RESIDENT RestConnectorMasterTable
	WHERE NOT IsNull([__FK_data])
	AND Match(status,'disabled','active');
	
	[UserRoles]:
	LOAD	
		[@Value] AS UserRole,
		[__FK_roles] & '|' & $(vCounter) & '|' & '$(vTenantID)' AS [_UserKey]
	RESIDENT RestConnectorMasterTable
	WHERE NOT IsNull([__FK_roles]);

	NextURL:
	LOAD	
		[href_u0] AS NextURL
	RESIDENT RestConnectorMasterTable
	WHERE NOT IsNull([__FK_next]);

	DROP TABLE RestConnectorMasterTable;
	
	LET vParams = SubField(Peek('NextURL',0,'NextURL'),'?',-1);
	LET vNextURLRows = NoOfRows('NextURL');

	DROP TABLE NextURL;
	
	LET vCounter = $(vCounter) + 1;

	LOOP WHILE $(vNextURLRows)>0;
  
	// Don't create map yet for OEM Dash support
	Map_AppOwner_Exists:
	MAPPING LOAD DISTINCT
		UserID,
		1
	RESIDENT Users;

	RENAME TABLE UserRoles TO TEMP;

	UserRoles:
	LEFT KEEP(Users)
	LOAD *
	RESIDENT TEMP;

	DROP TABLE TEMP;

	Map_AppOwner_UserName:
	MAPPING LOAD DISTINCT
		UserID,
		UserName
	RESIDENT Users;

	Map_AppOwner_UserSubject:
	MAPPING LOAD DISTINCT
		UserID,
		UserSubject
	RESIDENT Users;

	Map_AppOwner_UserEmail:
	MAPPING LOAD DISTINCT
		UserID,
		UserEmail
	RESIDENT Users;

	Call get_user_field

	Map_UserID_$(vPersonalUserField):
	MAPPING LOAD DISTINCT
		UserID,
		$(vPersonalUserField)
	RESIDENT Users;
	  
END SUB
///$tab Spaces
SUB get_spaces

	SET vParams = 'limit=100';

	[Spaces]:
	LOAD * INLINE [SpaceID];

	DO

		// LET vAPICallCounter = $(vAPICallCounter) + 1;

		LIB CONNECT TO '$(vu_rest_connection)';
		
		RestConnectorMasterTable:
		SQL SELECT 
			"__KEY_root",
			(SELECT 
				"id",
				"type",
				"ownerId",
				"tenantId",
				"name",
				"description",
				"createdAt",
				"createdBy",
				"updatedAt",
				"__KEY_data",
				"__FK_data",
				(SELECT 
					"__KEY_meta",
					"__FK_meta"
				FROM "meta" PK "__KEY_meta" FK "__FK_meta"),
				(SELECT 
					"__KEY_links",
					"__FK_links"
				FROM "links" PK "__KEY_links" FK "__FK_links")
			FROM "data" PK "__KEY_data" FK "__FK_data"),
			(SELECT 
				"__KEY_links_u0",
				"__FK_links_u0",
				(SELECT 
					"href" AS "href_u2",
					"__FK_next"
				FROM "next" FK "__FK_next")
			FROM "links" PK "__KEY_links_u0" FK "__FK_links_u0")
		FROM JSON (wrap on) "root" PK "__KEY_root"
		WITH CONNECTION (  
		URL "https://$(vu_tenant_fqdn)/api/v1/spaces?$(vParams)"
		);
		
		CONCATENATE (Spaces)
		LOAD
			[id] AS SpaceID,
			Capitalize([type]) AS SpaceType,
			[ownerId] AS SpaceOwnerID,
			// [tenantId],
			[name] AS SpaceName,
			[description] AS SpaceDescription,
			TimeStamp([createdAt]) AS SpaceCreatedTime,
			[createdBy] AS SpaceCreatedBy
			// [updatedAt],
			// [__KEY_data],
			// [__FK_data] AS [__KEY_root]
		RESIDENT RestConnectorMasterTable
		WHERE NOT IsNull([__FK_data])
		;

		NextURL:
		LOAD	
			[href_u2] AS NextURL
		RESIDENT RestConnectorMasterTable
		WHERE NOT IsNull([__FK_next])
		;

		DROP TABLE RestConnectorMasterTable;

		LET vParams = SubField(Peek('NextURL',0,'NextURL'),'?',-1);
		LET vNextURLRows = NoOfRows('NextURL');

		DROP TABLE NextURL;
	
	LOOP WHILE $(vNextURLRows)>0;

	AllSpacesMap:
	MAPPING LOAD DISTINCT
		SpaceID,
		1
	RESIDENT Spaces
	;

	Map_SpaceName_SpaceID:
	MAPPING LOAD DISTINCT
		Text(SpaceName) AS SpaceName,
		SpaceID
	RESIDENT Spaces
	;
  
	Map_SpaceID_SpaceName:
	MAPPING LOAD DISTINCT
		SpaceID,
		Text(SpaceName) AS SpaceName
	RESIDENT Spaces
	;
  
	Map_SpaceID_OwnerID:
	MAPPING LOAD DISTINCT
		SpaceID,
		SpaceOwnerID
	RESIDENT Spaces
	;
  
	Map_SpaceID_SpaceType:
	MAPPING LOAD DISTINCT
		SpaceID,
		SpaceType
	RESIDENT Spaces
	;

END SUB

///$tab Apps
SUB get_apps

	SET vParams = 'limit=100&resourceType=app&noActions=true';

	DO

		// LET vAPICallCounter = $(vAPICallCounter) + 1;

		LIB CONNECT TO '$(vu_rest_connection)';

		RestConnectorMasterTable:
		SQL SELECT 
			"__KEY_root",
			(SELECT 
				"name" AS "name_u0",
				"resourceCustomAttributes",
				"resourceUpdatedAt",
				"resourceType",
				"resourceId",
				"resourceCreatedAt",
				"id" AS "id_u0",
				"createdAt",
				"updatedAt",
				"creatorId",
				"updaterId",
				"tenantId",
				"isFavorited" AS "isFavorited_u0",
				"ownerId" AS "ownerId_u0",
				"description" AS "description_u0",
				"__KEY_data",
				"__FK_data",
				(SELECT 
					"_resourcetype",
					"createdDate",
					"description",
					"dynamicColor",
					"hasSectionAccess",
					"id",
					"lastReloadTime",
					"modifiedDate",
					"name",
					"originAppId",
					"owner",
					"ownerId",
					"publishTime",
					"published",
					"spaceId",
					"thumbnail",
					"encrypted",
					"__FK_resourceAttributes"
				FROM "resourceAttributes" FK "__FK_resourceAttributes"),
				(SELECT 
					"__KEY_links",
					"__FK_links"
				FROM "links" PK "__KEY_links" FK "__FK_links"),
				(SELECT 
					"__KEY_meta",
					"__FK_meta"
				FROM "meta" PK "__KEY_meta" FK "__FK_meta")
			FROM "data" PK "__KEY_data" FK "__FK_data"),
			(SELECT 
				"__KEY_links_u0",
				"__FK_links_u0",
				(SELECT 
					"href" AS "href_u4",
					"__FK_next"
				FROM "next" FK "__FK_next")
			FROM "links" PK "__KEY_links_u0" FK "__FK_links_u0")
		FROM JSON (wrap on) "root" PK "__KEY_root"
		WITH CONNECTION (  
			URL "https://$(vu_tenant_fqdn)/api/v1/items?$(vParams)"
		);

		[Apps]:
		LOAD
			'$(vTenantID)' AS TenantID,
			[name_u0] AS AppName,
			// [resourceCustomAttributes],
			// [resourceUpdatedAt],
			// [resourceType],
			[resourceId] AS AppID,
			TimeStamp([resourceCreatedAt]) AS AppCreatedTime,
			// [id_u0] as [id_u0],
			// [createdAt],
			TimeStamp([updatedAt]) AS AppUpdatedTime,
			[creatorId] AS AppCreatorID,
			[updaterId] AS AppUpdaterID,
			// [tenantId],
			[isFavorited_u0] AS AppIsFavorited,
			// [ownerId_u0] AS AppOwnerID,
			[description_u0] AS AppDescription
		RESIDENT RestConnectorMasterTable
		WHERE NOT IsNull([__FK_data])
		;

		AppDetails:
		LOAD	
			// [_resourcetype],
			// [createdDate],
			// [description],
			// [dynamicColor],
			[hasSectionAccess] AS AppHasSectionAccess,
			[id] AS AppID,
			[ownerId] AS AppOwnerID,
			TimeStamp([lastReloadTime]) AS AppLastReloadTime,
			TimeStamp(TimeStamp([lastReloadTime]) + $(vReportTimeDiffFromGMT)) AS AppLastReloadTimeLocalServerTime,
			// [modifiedDate],
			// [name],
			[originAppId] AS AppOriginalID,
			// [owner] as AppOwnerSubject,
			ApplyMap('Map_AppOwner_UserSubject',ownerId,'[Deleted]') AS AppOwnerSubject,
			ApplyMap('Map_AppOwner_UserName',ownerId,'[Deleted]') AS AppOwnerName,
			ApplyMap('Map_AppOwner_UserEmail',ownerId,'[Deleted]') AS AppOwnerEmail,
			// [ownerId],
			// [published] as AppPublished, // Only relevant for apps distributed from QSEoW
			TimeStamp([publishTime]) AS AppPublishedTime,
			If(ApplyMap('AllSpacesMap',spaceId)<>1,
				If(Len(ApplyMap('Map_UserID_$(vPersonalUserField)',ownerId,'[Deleted]'))>0,
					'Personal - ' & ApplyMap('Map_UserID_$(vPersonalUserField)',ownerId,'[Deleted]'),
					'[Staged]'
					),
				spaceId
				) AS SpaceID,
			// [thumbnail],
			[encrypted] AS AppEncrypted
		RESIDENT RestConnectorMasterTable
		WHERE NOT IsNull([__FK_resourceAttributes])
		AND [published]<>'True'
		;

		NextURL:
		LOAD	
			[href_u4] AS NextURL
		RESIDENT RestConnectorMasterTable
		WHERE NOT IsNull([__FK_next])
		;

		DROP TABLE RestConnectorMasterTable;

		LET vParams = SubField(Peek('NextURL',0,'NextURL'),'?',-1);
		LET vNextURLRows = NoOfRows('NextURL');

		DROP TABLE NextURL;

	LOOP WHILE $(vNextURLRows)>0;
  
	CONCATENATE(Spaces)
	LOAD DISTINCT
		SpaceID,
		SpaceID AS SpaceName,
		'Personal' AS SpaceType,
		AppOwnerID AS SpaceOwnerID,
		'[N/A]' AS SpaceDescription,
		'[N/A]' AS SpaceCreatedTime,
		'[N/A]' AS SpaceCreatedBy
	RESIDENT AppDetails
	WHERE WildMatch(SpaceID,'Personal - *');
  
	INNER JOIN(Apps)
	LOAD 
		*,
		If(WildMatch(SpaceID,'Personal - *'),SpaceID,ApplyMap('Map_SpaceID_SpaceName',SpaceID)) AS AppSpaceName
	Resident AppDetails;

	DROP TABLE AppDetails;
  
	Map_AppID_SpaceID:
	MAPPING LOAD DISTINCT
		AppID,
		SpaceID
	RESIDENT Apps;

	Map_AllApps:
	MAPPING LOAD DISTINCT
		AppID,
		1
	RESIDENT Apps;

	// No map yet for OEM Dashboard support
	Map_AllApps_Temp:
	Mapping LOAD DISTINCT
		AppID,
		1
	RESIDENT Apps;

	Map_AppID_UserID:
	MAPPING LOAD DISTINCT
		AppID,
		AppOwnerID
	RESIDENT Apps;

END SUB
///$tab Audits-reports
Sub get_audit_reports

	ReportType:
	MAPPING LOAD * INLINE [
		@Value_u0,Metered
		api.public,1
		automation.execution,1
		excel-addin.download,1
		reporttask.execution,1
		sense-dialog.download,0
		sense-ondemand.download,1
		subscription.execution,0
	];
	
	NonMeteredPublicTemplates:
		MAPPING LOAD * INLINE [
		TemplateName, NonMetered
		sense-image-1.0,1
		sense-sheet-1.0,1
		sense-data-1.0,1
	];

	MeteredReportType:
		LOAD * INLINE [
		tag,MeteredReportEvent
		api.public,API
		automation.execution,Automation
		excel-addin.download,Excel Preview
		reporttask.execution,Report Task Execution
		sense-ondemand.download,OnDemand
	];


	LET vCounter = 0;
	LET vNextURL = '';
	LET vUniqueKey = Num('$(reload_start)') & '$(vTenantID)';
	LET vCurrentMonth = MonthName(Floor(Today()));
	LET vPriorMonth = MonthName( AddMonths(Floor(Today()),-1));

	IF $(vIncrementalQVDsAvailable)=1 THEN
		LET vISO_8601_Date_Range = '&eventTime=' & Left(Date(TimeStamp('$(vIncrementalStartTime)'),'YYYY-MM-DD'),10) & 'T' & Right('0' & Timestamp('$(vIncrementalStartTime)','MM/DD/YYYY hh:mm:ss'),8) & 'Z/9999-01-01T00:00:00Z';
	ELSE
		LET vISO_8601_Date_Range = '&eventTime=' & Left(Date(TimeStamp('$(vInitialDaysBack)'),'YYYY-MM-DD'),10) & 'T' & Right('0' & Timestamp('$(vInitialDaysBack)','MM/DD/YYYY hh:mm:ss'),8) & 'Z/9999-01-01T00:00:00Z';
	END IF

	DO
		LIB CONNECT TO '$(vu_rest_connection)';

		RestConnectorMasterTable:
			SQL SELECT 
			"__KEY_root",
			(SELECT 
				"id",
				"contentType",
				"eventId",
				"eventTime",
				"eventType",
				"eventTypeVersion",
				"source",
				"tenantId",
				"userId",
				"__KEY_data",
				"__FK_data",
				(SELECT 
					"endTime",
					"reportId",
					"requestId",
					"startTime",
					"success",
					"templateType",
					"traceId",
					"version",
					"__KEY_data_u0",
					"__FK_data_u0",
					(SELECT 
						"@Value",
						"__FK_appIds"
					FROM "appIds" FK "__FK_appIds" ArrayValueAlias "@Value"),
					(SELECT 
						"@Value" AS "@Value_u0",
						"__FK_tags"
					FROM "tags" FK "__FK_tags" ArrayValueAlias "@Value_u0")
				FROM "data" PK "__KEY_data_u0" FK "__FK_data_u0")
			FROM "data" PK "__KEY_data" FK "__FK_data"),
			(SELECT 
				"Prev",
				"__KEY_links_u0",
				"__FK_links_u0",
				(SELECT 
					"Href" AS "Href_u0",
					"__FK_Self_u0"
				FROM "Self" FK "__FK_Self_u0"),
				(SELECT 
					"Href" AS "Href_u1",
					"__FK_Next"
				FROM "Next" FK "__FK_Next"),
				(SELECT 
					"href" AS "href_u0",
					"__FK_self_u0"
				FROM "self" FK "__FK_self_u0"),
				(SELECT 
					"href" AS "href_u1",
					"__FK_next"
				FROM "next" FK "__FK_next")
			FROM "links" PK "__KEY_links_u0" FK "__FK_links_u0")
		FROM JSON (wrap on) "root" PK "__KEY_root"
		WITH CONNECTION (
			URL "https://$(vu_tenant_fqdn)/api/v1/audits?limit=$(vu_audit_page_size)&sort=-eventTime&source=com.qlik/reporting-service&eventType=com.qlik.v1.reporting-service.audit$(vISO_8601_Date_Range)$(vNextURL)"
		);

		[appIds]:
			LOAD
				[@Value] as AppID,
				[__FK_appIds]+($(vCounter)*$(vu_audit_page_size)) AS [__KEY_data_u0]
			RESIDENT RestConnectorMasterTable
			WHERE NOT IsNull([__FK_appIds])
			//and [@Value_u0] <> 'subscription.execution'
		;

		[tags]:
			LOAD
				[@Value_u0] AS [@Value_u0],
				[__FK_tags]+($(vCounter)*$(vu_audit_page_size)) AS [__KEY_data_u0]
			RESIDENT RestConnectorMasterTable
			WHERE NOT IsNull([__FK_tags]) 
			//and [@Value_u0] <> 'subscription.execution'
		;

		[data]:
			LOAD
				[endTime],
				[reportId],
				//[startTime] & '$(vUniqueKey)' & $(vCounter) as [reportId],
				[requestId],
				[startTime],
				[success],
				[templateType],
				[traceId],
				[version],
				[__KEY_data_u0]+($(vCounter)*$(vu_audit_page_size)) as [__KEY_data_u0],
				[__FK_data_u0]+($(vCounter)*$(vu_audit_page_size))AS [__KEY_data]
			RESIDENT RestConnectorMasterTable
			WHERE NOT IsNull([__FK_data_u0])
			//and [@Value_u0] <> 'subscription.execution'
		;

		[data_u0]:
			LOAD
				[id],
				[contentType],
				[eventId],
				[eventTime],
				[eventType],
				[eventTypeVersion],
				[source],
				[tenantId],
				[userId],
				[__KEY_data] +($(vCounter)*$(vu_audit_page_size)) as [__KEY_data] ,
				[__FK_data] AS [__KEY_root]
			RESIDENT RestConnectorMasterTable
			WHERE NOT IsNull([__FK_data])
			//and [@Value_u0] <> 'subscription.execution'
		;

		[NextURL]:
			LOAD	
				[href_u1] AS NextURL
			RESIDENT RestConnectorMasterTable
			WHERE NOT IsNull([__FK_next])
		;

		DROP TABLE RestConnectorMasterTable;

		LET vNextURL = TextBetween(Peek('NextURL',0,'NextURL'),'&next=',Null());

		IF SubStringCount('$(vNextURL)','&') >= 1 THEN
			LET vNextURL = TextBetween('$(vNextURL)',Null(),'&');
		END IF

		LET vNextURL = '&next=' & '$(vNextURL)';

		LET vNextURLRows = NoOfRows('NextURL');

		DROP TABLE NextURL;

		LET vCounter = $(vCounter) + 1;

		LOOP WHILE $(vNextURLRows)>0;

    // Audits Reports TRANSFORM

	IF NoOfRows('data')>0 THEN

		AuditReports:
		LOAD
			[reportId] as _ReportID, 
			TimeStamp([endTime]) as [ReportEndTime],
			// Date(floor(Timestamp([endTime] + $(vReportTimeDiffFromGMT)))) as Date,
			Timestamp([startTime]) as [ReportStartTime],
			if([success]='True',1,if([success]='False',0)) as success,
			[templateType],
			ApplyMap('NonMeteredPublicTemplates',[templateType],0) as TemplateTypeNotMetered,
			[version],
			[__KEY_data_u0],
			[__KEY_data]
		RESIDENT [data];

		LEFT JOIN(AuditReports)
		LOAD
			[source],
			[tenantId],
			[userId] as UserID,
			[userId] as UserIDwithAuditsReports,
			[__KEY_data],
			[__KEY_root]
		RESIDENT [data_u0];

		LEFT JOIN(AuditReports) 
		LOAD
			AppID,
			AppID as AppIDwithAuditsReports,
			[__KEY_data_u0]
		RESIDENT [appIds];

		LEFT JOIN(AuditReports) 
		LOAD
			[@Value_u0] as tag,
			applymap('ReportType',@Value_u0,0) as MeteredReport,
			[__KEY_data_u0]
		RESIDENT [tags]; 

		DROP Tables data,data_u0,appIds,tags;
		DROP Fields __KEY_data,__KEY_root,__KEY_data_u0;

		//Filter Down to Metered Reports only. Can't do this with the /audits endpoint 

		NOCONCATENATE
		NewAuditReports:
		LOAD
			_ReportID,
			//[Date],
			//[ReportEndUTCDate],
			[ReportEndTime],
			[ReportStartTime],
			success,
			[templateType],
			[TemplateTypeNotMetered],
			[version],
			[source],
			[tenantId],
			UserID,
			UserIDwithAuditsReports,
			AppID,
			AppIDwithAuditsReports,
			tag,
			MeteredReport
		RESIDENT AuditReports
		WHERE MeteredReport=1
			AND TemplateTypeNotMetered=0
			AND LEN([_ReportID])>0
		;

		DROP TABLE AuditReports;
		RENAME TABLE NewAuditReports to AuditReports;
        
    ELSE
    	
        TRACE This tenant does not have any executed metered reports. Please reload this application once it does. Dropping all tables...;
            
        LET vNumTables = NoOfTables();

        FOR i = NoOfTables() - 1 TO 0 STEP - 1
            LET vTable = TableName($(i));
            TRACE Dropping table '$(vTable)';
            DROP TABLES [$(vTable)];
        NEXT
        
        SET vTenantHasMeteredReports = 0;

        exit script;
	
	END IF
	
END SUB
///$tab Incremental
// For loading a table from QVD ///////////////////
SUB incremental
	
	IF $(vIncrementalQVDsAvailable)=1 THEN
	
		LET qvd_name = '$(vOutputQVDName(AuditReports,$(app_version)))';

		TRACE Looking to load: $(qvd_name).;
		LET file_size = If(IsNull(FileSize('$(qvd_name)')),0,FileSize('$(qvd_name)'));

		IF file_size > 0 THEN
			TRACE File size is $(file_size) bytes;
			TRACE Fetching data from: $(qvd_name);
			
			Map__ReportID_AppID_FromQVD:
			MAPPING LOAD DISTINCT
				_ReportID,
				AppID
			FROM '$(qvd_name)'(qvd);
			
			Map__ReportID_ReportEndTime_FromQVD:
			MAPPING LOAD DISTINCT
				_ReportID,
				ReportEndTime
			FROM '$(qvd_name)'(qvd);
			
			AuditReports:
			LOAD DISTINCT 
				* 
			FROM '$(qvd_name)'(qvd)
			WHERE ReportEndTime >= Date('$(vMaxReportAge)')
			AND NOT EXISTS(_ReportID);
			
			Map_ReportID_ReportID:
			MAPPING LOAD DISTINCT
				_ReportID,
				1
			RESIDENT AuditReports;

		ELSE
			TRACE Could not find file: $(qvd_name).;
		END IF
		
	END IF
	

	IF NoOfRows('AuditReports')>0 THEN   
		FOR EACH data_table IN 'AuditReports' //,'AuditReloadLineage','AuditReloadErrors'
			LET qvd_name = '$(vOutputQVDName($(data_table),$(app_version)))';
			STORE $(data_table) INTO '$(qvd_name)'(qvd);
			LET file_size_$(data_table) = FileSize('$(qvd_name)');
		NEXT data_table
	ELSE
		Trace There have been no metered report executions in this tenant. Exiting Reload...;
		exit script;    	
	END IF
  
END SUB
///$tab Transform
SUB transform

	// Clean out Apps table, leave only Apps with referenced auditedreports
	AppsWithAudittedReports:
	LOAD 
		AppID as AppIDWithReport
	Resident AuditReports    
	WHERE _ReportID>0;

	NOCONCATENATE
	TEMP:
	LOAD
		*
	RESIDENT Apps
	WHERE EXISTS(AppIDWithReport,AppID);    

	DROP TABLE Apps;
	RENAME TABLE TEMP TO Apps;

	SpacesWithAppsWithAudittedReports:
	LOAD 
		SpaceID AS SpaceIDWithReport
	RESIDENT Apps;

	NOCONCATENATE
	TEMP:
	LOAD
		*
	RESIDENT Spaces
	WHERE EXISTS(SpaceIDWithReport,SpaceID);

	DROP TABLE Spaces;
	RENAME TABLE TEMP TO Spaces;
	DROP TABLE SpacesWithAppsWithAudittedReports;
	DROP TABLE AppsWithAudittedReports;

	UsersWithReports:
	LOAD 
		UserID AS UserIDWithReport
	RESIDENT AuditReports   
	WHERE _ReportID>0;

	NOCONCATENATE
	TEMP:
	LOAD
		*
	RESIDENT Users
	WHERE EXISTS(UserIDWithReport,UserID);    

	DROP TABLE Users;
	RENAME TABLE TEMP TO Users;
	DROP TABLE UsersWithReports;
    
	//Date Calendar

	ReportMinDate:
	LOAD
		Date(Min(ReportEndTime)+ $(vReportTimeDiffFromGMT)) AS ReportMinDate
	RESIDENT AuditReports;

	LET vReportMinDateNumber = Floor(Monthstart(Peek('ReportMinDate',0,'ReportMinDate')));
	LET vReportMaxDateNumber = Floor(MonthEnd(Now()+ $(vReportTimeDiffFromGMT)));

	DROP TABLE ReportMinDate;
	
	// Date Table (and UTC Date Table with all dates between min and max report end time
	// Also outer joining on to all reports, report execution success or not
	  
	For Date=$(vReportMinDateNumber) to $(vReportMaxDateNumber)
	
		Date:
		LOAD
			Date($(Date)) as Date,
			1 as success
		AutoGenerate(1);

		Date:
		LOAD
			Date($(Date)) as Date,
			0 as success
		AutoGenerate(1);

	Next Date

	//In fill all dates into fact table (auditreports). Include a row for success=1 or 0
	
	OUTER JOIN (AuditReports)
	LOAD
		Date,
		success
	RESIDENT Date;
	
	// Now make a Datekey between the date and fact table for all dates between min and max date for all combinations of success = 1 or 0 
	// and meteredreport= 1 or 0
	// also ensure local time conversion if GMT offset is set in optional configuration
	
	TEMP:
	LOAD
		AutoNumber(Date(Date)&success,'DateKey') as _DateKey,
		Date,
		Year(Date) AS Year,
		MonthName(Date) AS Month,
		WeekName(Date) AS Week,
		Dual(Num(Weekday(Date)) & '-' & Pick(Weekday(Date)+1,'Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'), Num(Weekday(Date))) AS [Day Of Week],
		Dual(Day(Date) & If(Match(Day(Date),1,21,31) ,'st',If(Match(Day(Date),2,22) , 'nd',If(Match(Day(Date),3,23) , 'rd', 'th'))),Day(Date)) AS [Day Of Month]
	RESIDENT Date;
	
	DROP TABLE Date;
	RENAME TABLE TEMP TO Date;
	
	TEMP:
	LOAD
		AutoNumber(Date(Floor(Timestamp([ReportEndTime]+ $(vReportTimeDiffFromGMT))))&success,'DateKey') AS _DateKey,
		_ReportID,
		Timestamp([ReportEndTime] + $(vReportTimeDiffFromGMT)) AS [ReportEndTime],
		Timestamp([ReportStartTime] + $(vReportTimeDiffFromGMT)) AS [ReportStartTime],
		success,
		[templateType],
		[version],
		[source],
		[tenantId],
		UserID,
		UserIDwithAuditsReports,
		AppID,
		AppIDwithAuditsReports,
		tag,
		MeteredReport
	RESIDENT AuditReports;

	DROP TABLE AuditReports;
	RENAME TABLE TEMP TO AuditReports;
			
	DROP TABLE TenantReportQuota;

END SUB
///$tab Multi-Tenant
Sub write_tenant_qvds(location, sub_dir, name, is_parent)
	Trace Storing QlikMetaCollection QVDs.;

	Let location = If(Right('$(location)',1)='/',Left('$(location)',Len('$(location)')-1),'$(location)');

	If $(is_parent)=0 then
		Let vFullLocation = '$(location)/QlikMetaCollection/Tenants/$(vTenantID)/$(sub_dir)/$(name)';
	Else
		Let vFullLocation = '$(location)/QlikMetaCollection/CompiledTenants/$(sub_dir)/$(name)';
	End if

	For i = 0 to NoOfTables()-1
		Let vTableName = TableName($(i));
		Trace Storing $(vTableName).;
		Store $(vTableName) Into [$(vFullLocation)/$(vTableName).qvd](qvd);
		Trace $(vTableName) stored!;
	Next i
  
End Sub

Sub load_multi_tenant_qvds(location, sub_dir, name)

	Let vDirLocation = If(Right('$(location)',1)='/',Left('$(location)',Len('$(location)')-1),'$(location)');
	Let vAnyFileFound = 0;

	Let vTenants = 1;
	For Each Dir in DirList('$(vDirLocation)/QlikMetaCollection/Tenants/')

		Let vFolder = '$(Dir)$(sub_dir)/$(name)/';
		Let vTenant = TextBetween('$(vFolder)','$(vDirLocation)/','/$(sub_dir)/');
		Trace --------------------;
		Trace Looking to load data for Tenant: $(vTenant);
		Trace --------------------;

		Let vTenantFileFound = 0;
		For Each file in FileList('$(vFolder)')
			If WildMatch('$(file)','*.qvd') THEN
				Let vAnyFileFound = 1;
				Let vTenantFileFound = 1;
				
				Let vTableName = TextBetween(Subfield('$(file)','/',-1),Null(),'.qvd');
				"$(vTableName)":
				Load Distinct
					*
				From [$(file)](qvd);
			End If
		Next file

		If $(vTenantFileFound) then
			Trace Completed loading QVDs for Tenant: $(vTenant);
			Let vTenants = $(vTenants) + 1;
		Else
			Trace No QVDs were found for Tenant: $(vTenant);
		End If

	Next Dir
    
	Let vTenants = $(vTenants) - 1;

	If $(vAnyFileFound)>0 then
		Trace --------------------;
		Trace Successfully loaded data from $(vTenants) Tenants!;
		Trace --------------------;
	Else
		Trace --------------------;
		Trace No QVDs were Found! Confirm that this directory is the parent directory of "QlikMetaCollection".;
		Trace --------------------;
	End If

End Sub
///$tab Helper-Functions
SUB execute_sub(sub_routine)
	Trace Working on $(sub_routine);
	Let sub_start = Num(Now(1));
	Call $(sub_routine)
	Let sub_finish = Num(Now(1));
	Let sub_duration = Num(Round((sub_finish-sub_start)*86400),'#,##0');
	Trace $(sub_routine) completed after $(sub_duration) seconds.;
END SUB
///$tab Main
//// App Variables & Messaging
SET ThousandSep=',';
SET DecimalSep='.';
SET MoneyThousandSep=',';
SET MoneyDecimalSep='.';
SET MoneyFormat='$ ###0.00;-$ ###0.00';
SET TimeFormat='h:mm:ss TT';
SET DateFormat='M/D/YYYY';
SET TimestampFormat='M/D/YYYY h:mm:ss[.fff] TT';
SET FirstWeekDay=0;
SET BrokenWeeks=1;
SET ReferenceDay=0;
SET FirstMonthOfYear=1;
SET CollationLocale='en-US';
SET CreateSearchIndexOnReload=1;
SET MonthNames='Jan;Feb;Mar;Apr;May;Jun;Jul;Aug;Sep;Oct;Nov;Dec';
SET LongMonthNames='January;February;March;April;May;June;July;August;September;October;November;December';
SET DayNames='Mon;Tue;Wed;Thu;Fri;Sat;Sun';
SET LongDayNames='Monday;Tuesday;Wednesday;Thursday;Friday;Saturday;Sunday';
SET NumericalAbbreviation='3:k;6:M;9:G;12:T;15:P;18:E;21:Z;24:Y;-3:m;-6:μ;-9:n;-12:p;-15:f;-18:a;-21:z;-24:y';

// Reset these variables
LET reload_start 	= Now(1);
SET start_msg=; 
SET comp=;
LET vTenants = 0;

SET app_name		= 'Report Analyzer';
SET app_version		= '1.0.0';
LET comp 			= ComputerName(); 
LET engine_ver 		= PurgeChar(EngineVersion(),Chr(39)); 
LET start_msg 		= 'Reloading $(app_name) $(app_version) from $(comp) running QIX Engine version $(engine_ver)';

Trace $(startMsg);


// REMOVED 'get_data_connections','get_reloads','get_reload_tasks','get_audit_reloads','conns_and_spaces_names'
// ADDED  check_license_reports, get_audits_reports

SUB load_core_data
	Trace Loading data...;
	For Each sub_routine in 'check_version','check_license_reports','get_tenant_metadata','get_users','get_spaces','get_apps','get_audit_reports','incremental'
		Call execute_sub(sub_routine)
	Next sub_routine
	
	If $(vu_track_app_meta_over_time) then
		Call store_app_meta_rolling
	End If
END SUB

SUB transform_data
	Trace Transforming data...;
	
	//REMOVE  'reload_concurrency','autonumber'
	
	For Each sub_routine in 'transform'
		Call execute_sub(sub_routine)
	Next sub_routine
END SUB


// Main
If $(vu_multi_tenant_enabled)=1 then 
	If $(vu_is_parent_app)=1 then
		Trace This application is configured for a Multi-Tenant setup and has been designated as a **Parent** app.;
		Trace This application will attempt to load all of the QVDs that have been generated for the $(app_name) within the "QlikMetaCollection" folder found within "$(vu_qlik_meta_collection_parent_dir)";
		Trace This application will then store all resulting QVDs to a "CompiledTenants" directory.;
		
		Call execute_sub('variables')
		Call execute_sub('load_multi_tenant_qvds(''$(vu_qlik_meta_collection_parent_dir)'',''Monitoring'',''$(app_name)'')')

		If $(vTenants)>0 then
			Call execute_sub('get_user_field')
			Call transform_data
		End If
		
		Trace This application will attempt to store all of the tables from this model to the "QlikMetaCollection/CompiledTenants" folder found within $(vu_qlik_meta_collection_parent_dir);
  		Call execute_sub('write_tenant_qvds(''$(vu_qlik_meta_collection_parent_dir)'',''Monitoring'',''$(app_name)'',1)')
		
		Trace Data fetched from $(vTenants) tenants.;
	Else
		Trace This application is configured for a Multi-Tenant setup and has been designated as a **Child** app.;
		Trace This application will attempt to store all of the tables from this model to the "QlikMetaCollection" folder found within "$(vu_qlik_meta_collection_parent_dir)";
		
		Call execute_sub('variables')
		Call load_core_data
		Call execute_sub('write_tenant_qvds(''$(vu_qlik_meta_collection_parent_dir)'',''Monitoring'',''$(app_name)'',0)')
		Call execute_sub('get_user_field')
		Call transform_data
	End If
Else
	Call execute_sub('variables')
	Call load_core_data
	Call execute_sub('get_user_field')
	Call transform_data

	Trace Data fetched from $(vu_tenant_fqdn);
End If

LET reload_end = Now(1);
LET reload_duration = Num(Ceil((reload_end-reload_start)*86400),'#,##0');
LET reload_message = 'At $(reload_end), $(app_name) v$(app_version) finished reloading on $(comp) (QIX Engine $(engine_ver)) after $(reload_duration) seconds.';
Trace $(reload_message);
